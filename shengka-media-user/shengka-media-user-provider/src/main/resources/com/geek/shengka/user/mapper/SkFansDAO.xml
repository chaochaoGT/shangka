<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.geek.shengka.user.mapper.SkFansDAO">
  <resultMap id="BaseResultMap" type="com.geek.shengka.user.entity.SkFans">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="attention_user_id" jdbcType="BIGINT" property="attentionUserId" />
    <result column="fans_state" jdbcType="TINYINT" property="fansState" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, attention_user_id, fans_state, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sk_fans
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from sk_fans
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.geek.shengka.user.entity.SkFans">
    insert into sk_fans (id, user_id, attention_user_id, 
      fans_state, create_time, update_time
      )
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{attentionUserId,jdbcType=BIGINT}, 
      #{fansState,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.geek.shengka.user.entity.SkFans" keyColumn="id" keyProperty="id" useGeneratedKeys="true">
    insert into sk_fans
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="attentionUserId != null">
        attention_user_id,
      </if>
      <if test="fansState != null">
        fans_state,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="attentionUserId != null">
        #{attentionUserId,jdbcType=BIGINT},
      </if>
      <if test="fansState != null">
        #{fansState,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.geek.shengka.user.entity.SkFans">
    update sk_fans
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="attentionUserId != null">
        attention_user_id = #{attentionUserId,jdbcType=BIGINT},
      </if>
      <if test="fansState != null">
        fans_state = #{fansState,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.geek.shengka.user.entity.SkFans">
    update sk_fans
    set user_id = #{userId,jdbcType=BIGINT},
      attention_user_id = #{attentionUserId,jdbcType=BIGINT},
      fans_state = #{fansState,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

    <select id="attentionFansList" resultType="com.geek.shengka.user.entity.vo.SkFansVO"
            parameterType="com.geek.shengka.user.request.FansRequest">
        SELECT
        su.user_id AS  userId,
        su.sk_code  AS skCode,
        su.remark,
        sf.fans_state  AS fansState,
        su.nick_name  AS nickName,
        su.user_icon  AS userIcon
        FROM
        sk_fans AS sf
        LEFT JOIN sk_user_base_info AS su ON
        <if test="userLabel !=null and userLabel==0">
            sf.attention_user_id = su.user_id
            WHERE
            sf.user_id = #{userId,jdbcType=BIGINT}
        </if>
        <if test="userLabel !=null and userLabel==1">
            sf.user_id = su.user_id
            WHERE
            sf.attention_user_id = #{userId,jdbcType=BIGINT}
        </if>
        ORDER BY sf.create_time desc
        <if test="startRecordNumb!=null and pageCount!=null">
            limit #{startRecordNumb,jdbcType=INTEGER},#{pageCount,jdbcType=INTEGER}
        </if>
    </select>
    <select id="checkFansState" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from sk_fans
        where user_id = #{userId} and attention_user_id = #{attentionUserId}
  </select>
    <select id="findFansList" resultType="com.geek.shengka.user.entity.vo.SkFansVO"
            parameterType="com.geek.shengka.user.request.FansRequest">
        SELECT
        su.user_id AS  userId,
        su.sk_code  AS skCode,
        su.remark,
        sf.fans_state  AS fansState,
        su.nick_name  AS nickName,
        su.user_icon  AS userIcon
        FROM
        sk_fans AS sf
        LEFT JOIN sk_user_base_info AS su ON
            sf.attention_user_id = su.user_id
        WHERE
        <if test="userId !=null and userId > 0">
        sf.user_id = #{userId,jdbcType=BIGINT}
        and
        </if>
        concat(su.nick_name,su.remark) like concat('%',#{keyWord},'%')
        ORDER BY sf.create_time  desc
    </select>
    <select id="selectMyFans" resultType="java.lang.String">
        select
        attention_user_id
        from sk_fans
        where
        user_id = #{userId,jdbcType=BIGINT}
        and attention_user_id in
        <foreach collection="attentionUserIds" item="item" separator="," open="(" close=")" >
            #{item}
        </foreach>
    </select>

    <delete id="deleteAttentionUser" >
    delete from sk_fans
    where user_id = #{userId} and attention_user_id = #{attentionUserId}
  </delete>
</mapper>