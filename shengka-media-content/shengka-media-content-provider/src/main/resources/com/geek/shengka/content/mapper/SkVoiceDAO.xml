<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.geek.shengka.content.mapper.SkVoiceDAO">
  <resultMap id="BaseResultMap" type="com.geek.shengka.content.entity.SkVoice">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="video_id" jdbcType="VARCHAR" property="videoId" />
    <result column="voice_url" jdbcType="VARCHAR" property="voiceUrl" />
    <result column="duration" jdbcType="INTEGER" property="duration" />
    <result column="geographic" jdbcType="VARCHAR" property="geographic" />
    <result column="enable" jdbcType="TINYINT" property="enable" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, video_id, voice_url, duration,geographic, `enable`, remark, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sk_voice
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from sk_voice
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.geek.shengka.content.entity.SkVoice">
    insert into sk_voice (id, user_id, video_id, 
      voice_url, duration,geographic, `enable`, 
      remark, create_time, update_time
      )
    values (#{id,jdbcType=VARCHAR}, #{userId,jdbcType=BIGINT}, #{videoId,jdbcType=VARCHAR}, 
      #{voiceUrl,jdbcType=VARCHAR}, #{duration,jdbcType=INTEGER},#{geographic,jdbcType=VARCHAR}, #{enable,jdbcType=TINYINT}, 
      #{remark,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.geek.shengka.content.entity.SkVoice" useGeneratedKeys="true" keyProperty="id">
    insert into sk_voice
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="videoId != null">
        video_id,
      </if>
      <if test="voiceUrl != null">
        voice_url,
      </if>
      <if test="duration != null">
        duration,
      </if>
      <if test="geographic != null">
        geographic,
      </if>
      <if test="enable != null">
        `enable`,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="videoId != null">
        #{videoId,jdbcType=VARCHAR},
      </if>
      <if test="voiceUrl != null">
        #{voiceUrl,jdbcType=VARCHAR},
      </if>
      <if test="duration != null">
        #{duration,jdbcType=INTEGER},
      </if>
      <if test="geographic != null">
        #{geographic,jdbcType=VARCHAR},
      </if>
      <if test="enable != null">
        #{enable,jdbcType=TINYINT},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.geek.shengka.content.entity.SkVoice">
    update sk_voice
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="videoId != null">
        video_id = #{videoId,jdbcType=VARCHAR},
      </if>
      <if test="voiceUrl != null">
        voice_url = #{voiceUrl,jdbcType=VARCHAR},
      </if>
      <if test="duration != null">
        duration = #{duration,jdbcType=INTEGER},
      </if>
      <if test="geographic != null">
        geographic = #{geographic,jdbcType=VARCHAR},
      </if>
      <if test="enable != null">
        `enable` = #{enable,jdbcType=TINYINT},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.geek.shengka.content.entity.SkVoice">
    update sk_voice
    set user_id = #{userId,jdbcType=BIGINT},
      video_id = #{videoId,jdbcType=VARCHAR},
      voice_url = #{voiceUrl,jdbcType=VARCHAR},
      duration = #{duration,jdbcType=INTEGER},
       geographic = #{geographic,jdbcType=VARCHAR},
      `enable` = #{enable,jdbcType=TINYINT},
      remark = #{remark,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  
  
  
  
  
  <select id="selectByVideoId" parameterType="java.lang.String" resultMap="BaseResultMap">
	    select 
	    <include refid="Base_Column_List" />
	    from sk_voice
	    where video_id = #{videoId,jdbcType=VARCHAR}
  </select>
  
   <select id="selectByVoices"  resultType="com.geek.shengka.content.response.VoiceInfo">
	   select 
	       sv.id as audioId,sv.user_id as userId,sv.video_id as videoId,sv.voice_url as url,sv.duration,sv.geographic,
	       su.nick_name as nickname,su.user_icon as avatar
	    from sk_voice sv, sk_user_base_info su 
	    where sv.user_id = su.user_id 
	    and  sv.enable  in (0,1)  
	    and  sv.video_id = #{videoId}  
	    order by sv.create_time desc   limit ${pageIndex} ,5
  </select>
  
  
     <select id="selectByVoiceIds"  resultType="com.geek.shengka.content.response.VoiceParam">
	   select 
	      group_concat(user_id) as userIds, group_concat('''',id,'''') as voiceIds
	    from sk_voice
	    where enable  in (0,1)  
	    and  video_id = #{videoId}  
	    order by create_time desc   limit ${pageIndex} ,5
     </select>
  
      <select id="selectByUserCount"  resultType="com.geek.shengka.content.response.VoiceUserParam">
	   select 
	      count(DISTINCT user_id) as userCount, video_id as videoId
	    from sk_voice
        WHERE
        video_id in (
        <foreach collection="list" item="item" separator="," >
            #{item}
        </foreach>
         )
         
          GROUP BY  video_id
	         
     </select>
  
  
  
</mapper>